{"version":3,"file":"Basics-stories.42f54935.iframe.bundle.js","mappings":";;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC4CA;;;;;AAKA;;;;;;;;AAqBA;;;;;;;;;;;;AChCA;;;ACxBA","sources":["webpack://chakra-ui-time-picker/./stories/helper.ts","webpack://chakra-ui-time-picker/./src/Select.tsx","webpack://chakra-ui-time-picker/./src/Combobox.tsx","webpack://chakra-ui-time-picker/./src/TimePicker.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  /* System font stack */\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,\n    Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;\n`;\n\nexport function generateOptions(length: number, excludedOptions: number[]) {\n  const arr = [];\n  for (let value = 0; value < length; value += 1) {\n    if (excludedOptions.indexOf(value) < 0) {\n      arr.push(value);\n    }\n  }\n  return arr;\n}\n\nexport function onChange(value: Date) {\n  console.log(value.toString());\n}\n\nexport function disabledHours() {\n  return [0, 1, 2, 3, 4, 5, 6, 7, 8, 22, 23];\n}\n\nexport function disabledMinutes(h: number | null) {\n  if (!h) return [];\n\n  switch (h) {\n    case 9:\n      return generateOptions(60, [30]);\n    case 21:\n      return generateOptions(60, [0]);\n    default:\n      return generateOptions(60, [0, 30]);\n  }\n}\n\nexport function disabledSeconds(h: number | null, m: number | null) {\n  if (!h || !m) return [];\n\n  return [h + (m % 60)];\n}\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport cx from 'classnames';\n\nimport type { Selector } from './interface';\nimport { scrollTo, noop } from './helpers';\n\nconst Column = styled.div`\n  flex: 1;\n\n  /*\n   * position relative needed to make offsetTop work\n   * used in scrolling to selected option\n   */\n  position: relative;\n  overflow-y: auto;\n  max-height: 12em;\n  border: 1px solid #e9e9e9;\n\n  scrollbar-width: 8px;\n\n  &:first-child {\n    border-left: 0;\n  }\n\n  &:last-child {\n    border-right: 0;\n  }\n\n  ul {\n    list-style: none;\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    width: 100%;\n  }\n\n  li {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    height: 24px;\n    line-height: 24px;\n    text-align: center;\n    cursor: pointer;\n    user-select: none;\n\n    &:hover {\n      background: #edfaff;\n    }\n\n    &.${({ className }) => className + '-option-selected'} {\n      background: #f7f7f7;\n      font-weight: bold;\n    }\n\n    &.${({ className }) => className + '-option-disabled'} {\n      color: #ccc;\n      &:hover {\n        background: transparent;\n        cursor: not-allowed;\n      }\n    }\n  }\n`;\n\ntype Props = {\n  prefixCls: string;\n  options: Array<{ value: string; disabled: boolean }>;\n  selectedIndex: number;\n  type: Selector;\n  label: string;\n  onSelect: (type: Selector, itemValue: string) => void;\n  onKeyDown: React.KeyboardEventHandler<HTMLElement>;\n  focused: boolean;\n};\n\nclass Select extends Component<Props> {\n  private selectRef: React.RefObject<HTMLDivElement>;\n  private listRef: React.RefObject<HTMLUListElement>;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.selectRef = React.createRef();\n    this.listRef = React.createRef();\n\n    this.onSelect = this.onSelect.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  componentDidMount() {\n    // jump to selected option\n    this.scrollToSelected(0);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { selectedIndex, focused } = this.props;\n    // smooth scroll to selected option\n    if (prevProps.selectedIndex !== selectedIndex) {\n      this.scrollToSelected(120);\n    }\n    if (prevProps.focused !== focused && focused) {\n      // focus on selectedIndex\n      this.changeFocusBy(0);\n    }\n  }\n\n  onSelect(value: string) {\n    const { onSelect, type } = this.props;\n    onSelect(type, value);\n  }\n\n  getOptionLabel(value: string) {\n    // 01 -> 1\n    // 30 -> 30\n    const number = parseInt(value, 10);\n\n    if (isNaN(number)) {\n      // am -> AM\n      return value.toUpperCase();\n    }\n\n    return number.toString();\n  }\n\n  getOptions() {\n    const { options, selectedIndex, prefixCls } = this.props;\n\n    return options?.map((item, index) => {\n      const selected = selectedIndex === index;\n      const cls = cx({\n        [`${prefixCls}-select-option-selected`]: selected,\n        [`${prefixCls}-select-option-disabled`]: item.disabled,\n      });\n\n      const onClick = item.disabled\n        ? noop\n        : () => {\n            this.onSelect(item.value);\n          };\n\n      const onKeyDown = (e: React.KeyboardEvent<HTMLLIElement>) => {\n        if (e.keyCode === 13 || e.keyCode === 32) {\n          // enter or space\n          onClick();\n          e.preventDefault();\n          e.stopPropagation();\n        }\n      };\n\n      return (\n        <li\n          role=\"radio\"\n          onClick={onClick}\n          className={cls}\n          key={index}\n          tabIndex={0}\n          onKeyDown={onKeyDown}\n          aria-checked={selected}\n          aria-label={this.getOptionLabel(item.value)}\n        >\n          {item.value}\n        </li>\n      );\n    });\n  }\n\n  handleKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {\n    if (e.keyCode === 40) {\n      // down arrow\n      this.changeFocusBy(1);\n      e.preventDefault();\n      e.stopPropagation();\n    } else if (e.keyCode === 38) {\n      // up arrow\n      this.changeFocusBy(-1);\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    // pass keydown to parent\n    this.props.onKeyDown(e);\n  }\n\n  changeFocusBy(offset: number) {\n    const { options, selectedIndex } = this.props;\n\n    // get new element index\n    let index = selectedIndex + offset;\n\n    if (index < 0) {\n      index = options.length - 1;\n    } else if (index >= options.length) {\n      index = 0;\n    }\n\n    // get new value\n    const selectedOption = options[index];\n\n    if (selectedOption.disabled) return;\n\n    this.onSelect(selectedOption.value);\n\n    // get new ref\n    const list = this.listRef.current;\n    if (!list) return;\n\n    const optionRef = list.children[index] as HTMLLIElement;\n    optionRef.focus();\n  }\n\n  scrollToSelected(duration: number) {\n    // move to selected item\n    const { selectedIndex } = this.props;\n    const list = this.listRef.current;\n\n    if (!list) {\n      return;\n    }\n\n    let index = selectedIndex;\n\n    if (index < 0) {\n      index = 0;\n    }\n\n    const topOption = list.children[index] as HTMLLIElement;\n    const to = topOption.offsetTop;\n\n    if (this.selectRef.current) {\n      scrollTo(this.selectRef.current, to, duration);\n    }\n  }\n\n  render() {\n    const { prefixCls, options, label } = this.props;\n\n    if (options.length === 0) {\n      return null;\n    }\n\n    return (\n      <Column\n        className={`${prefixCls}-select`}\n        onKeyDown={this.handleKeyDown}\n        ref={this.selectRef}\n      >\n        <ul role=\"radiogroup\" aria-label={`Select ${label}`} ref={this.listRef}>\n          {this.getOptions()}\n        </ul>\n      </Column>\n    );\n  }\n}\n\nexport default Select;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport set from 'date-fns/set';\nimport getHours from 'date-fns/getHours';\nimport getMinutes from 'date-fns/getMinutes';\nimport getSeconds from 'date-fns/getSeconds';\n\nimport Select from './Select';\nimport { formatOption } from './helpers';\n\nimport type { Selector } from './interface';\n\nconst Columns = styled.div`\n  position: absolute;\n  z-index: 100;\n  width: 100%;\n\n  display: flex;\n  flex-direction: row;\n  background-color: white;\n  border-radius: 4px;\n  border-left: 1px solid #ccc;\n  border-right: 1px solid #ccc;\n  margin-left: -1px;\n`;\n\ntype Props = {\n  format: string;\n  defaultOpenValue: Date;\n  prefixCls: string;\n  value: Date;\n  use12Hours: boolean;\n  isAM: boolean;\n  onChange: (value: Date) => void;\n  onAmPmChange: (ampm: string) => void;\n  showHour: boolean;\n  showMinute: boolean;\n  showSecond: boolean;\n  hourOptions: number[];\n  minuteOptions: number[];\n  secondOptions: number[];\n  disabledHours: () => number[];\n  disabledMinutes: (hour: number | null) => number[];\n  disabledSeconds: (hour: number | null, minute: number | null) => number[];\n};\n\nclass Combobox extends Component<Props, { selectFocusOn: null | Selector }> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      selectFocusOn: null,\n    };\n\n    this.onItemChange = this.onItemChange.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.getColumns = this.getColumns.bind(this);\n  }\n\n  onItemChange(type: Selector, itemValue: string) {\n    const { onChange, defaultOpenValue, use12Hours, isAM, onAmPmChange } =\n      this.props;\n    const value = this.props.value || defaultOpenValue;\n\n    let hour = getHours(value);\n    let minute = getMinutes(value);\n    let second = getSeconds(value);\n\n    if (type === 'hour') {\n      if (use12Hours) {\n        if (isAM) {\n          hour = +itemValue % 12;\n        } else {\n          hour = (+itemValue % 12) + 12;\n        }\n      } else {\n        hour = +itemValue;\n      }\n    } else if (type === 'minute') {\n      minute = +itemValue;\n    } else if (type === 'ampm') {\n      const ampm = itemValue.toUpperCase();\n      if (use12Hours) {\n        if (ampm === 'PM' && hour < 12) {\n          hour = (hour % 12) + 12;\n        }\n\n        if (ampm === 'AM') {\n          if (hour >= 12) {\n            hour = hour - 12;\n          }\n        }\n      }\n      onAmPmChange(ampm);\n    } else {\n      second = +itemValue;\n    }\n\n    onChange(\n      set(value, {\n        hours: hour,\n        minutes: minute,\n        seconds: second,\n      })\n    );\n  }\n\n  getHourSelect(hour: number) {\n    const { prefixCls, hourOptions, disabledHours, showHour, use12Hours } =\n      this.props;\n\n    if (!showHour) {\n      return null;\n    }\n\n    const disabledOptions = disabledHours();\n\n    let hourOptionsAdj;\n    let hourAdj;\n\n    if (use12Hours) {\n      hourOptionsAdj = [12].concat(hourOptions.filter((h) => h < 12 && h > 0));\n      hourAdj = hour % 12 || 12;\n    } else {\n      hourOptionsAdj = hourOptions;\n      hourAdj = hour;\n    }\n\n    return (\n      <Select\n        prefixCls={prefixCls}\n        options={hourOptionsAdj?.map((option) =>\n          formatOption(option, disabledOptions)\n        )}\n        selectedIndex={hourOptionsAdj.indexOf(hourAdj)}\n        type=\"hour\"\n        label=\"hour\"\n        onSelect={this.onItemChange}\n        onKeyDown={(e) => this.handleKeyDown('hour', e)}\n        focused={this.state.selectFocusOn === 'hour'}\n      />\n    );\n  }\n\n  getMinuteSelect(minute: number) {\n    const {\n      prefixCls,\n      minuteOptions,\n      disabledMinutes,\n      defaultOpenValue,\n      showMinute,\n      value: propValue,\n    } = this.props;\n    if (!showMinute) {\n      return null;\n    }\n    const value = propValue || defaultOpenValue;\n    const disabledOptions = disabledMinutes(getHours(value));\n\n    return (\n      <Select\n        prefixCls={prefixCls}\n        options={minuteOptions?.map((option) =>\n          formatOption(option, disabledOptions)\n        )}\n        selectedIndex={minuteOptions.indexOf(minute)}\n        type=\"minute\"\n        label=\"minute\"\n        onSelect={this.onItemChange}\n        onKeyDown={(e) => this.handleKeyDown('minute', e)}\n        focused={this.state.selectFocusOn === 'minute'}\n      />\n    );\n  }\n\n  getSecondSelect(second: number) {\n    const {\n      prefixCls,\n      secondOptions,\n      disabledSeconds,\n      showSecond,\n      defaultOpenValue,\n      value: propValue,\n    } = this.props;\n    if (!showSecond) {\n      return null;\n    }\n    const value = propValue || defaultOpenValue;\n    const disabledOptions = disabledSeconds(getHours(value), getMinutes(value));\n\n    return (\n      <Select\n        prefixCls={prefixCls}\n        options={secondOptions?.map((option) =>\n          formatOption(option, disabledOptions)\n        )}\n        selectedIndex={secondOptions.indexOf(second)}\n        type=\"second\"\n        label=\"second\"\n        onSelect={this.onItemChange}\n        onKeyDown={(e) => this.handleKeyDown('second', e)}\n        focused={this.state.selectFocusOn === 'second'}\n      />\n    );\n  }\n\n  getAMPMSelect() {\n    const { prefixCls, use12Hours, format, isAM } = this.props;\n\n    if (!use12Hours) {\n      return null;\n    }\n\n    const AMPMOptions = ['am', 'pm'] // If format has A char, then we should uppercase AM/PM\n      ?.map((c) => (format.match(/\\sA/) ? c.toUpperCase() : c))\n      ?.map((c) => ({ value: c, disabled: false }));\n\n    const selected = isAM ? 0 : 1;\n\n    return (\n      <Select\n        prefixCls={prefixCls}\n        options={AMPMOptions}\n        selectedIndex={selected}\n        type=\"ampm\"\n        label=\"AM or PM\"\n        onSelect={this.onItemChange}\n        onKeyDown={(e) => this.handleKeyDown('ampm', e)}\n        focused={this.state.selectFocusOn === 'ampm'}\n      />\n    );\n  }\n\n  handleKeyDown(currentType: Selector, e: React.KeyboardEvent<HTMLElement>) {\n    if (e.keyCode === 39) {\n      // right arrow\n      this.changeFocusTo(currentType, 1);\n      e.preventDefault();\n      e.stopPropagation();\n    } else if (e.keyCode === 37) {\n      // left arrow\n      this.changeFocusTo(currentType, -1);\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }\n\n  getColumns() {\n    // get list of enabled columns (e.g. ['hour', 'minute', 'ampm'])\n    const { showHour, showMinute, showSecond, use12Hours } = this.props;\n\n    return [\n      ['hour', showHour],\n      ['minute', showMinute],\n      ['second', showSecond],\n      ['ampm', use12Hours],\n    ]\n      .filter(([, enabled]) => enabled)\n      ?.map(([val]) => val as Selector);\n  }\n\n  changeFocusTo(currentSelectType: Selector, offset: number) {\n    const columns = this.getColumns();\n\n    const currentIndex = columns.indexOf(currentSelectType);\n    let newIndex = currentIndex + offset;\n\n    // bounds + wrap\n    if (newIndex < 0) {\n      newIndex = columns.length - 1;\n    } else if (newIndex >= columns.length) {\n      newIndex = 0;\n    }\n\n    const newFocusOn = columns[newIndex];\n\n    this.setState({ selectFocusOn: newFocusOn });\n  }\n\n  render() {\n    const { prefixCls, defaultOpenValue, value: propValue } = this.props;\n    const value = propValue || defaultOpenValue;\n    return (\n      <Columns className={`${prefixCls}-combobox`}>\n        {this.getHourSelect(getHours(value))}\n        {this.getMinuteSelect(getMinutes(value))}\n        {this.getSecondSelect(getSeconds(value))}\n        {this.getAMPMSelect()}\n      </Columns>\n    );\n  }\n}\n\nexport default Combobox;\n","import React, { Component, KeyboardEvent, RefObject } from 'react';\nimport styled from 'styled-components';\nimport cx from 'classnames';\nimport format from 'date-fns/format';\n\nimport { noop } from './helpers';\nimport Panel from './Panel';\nimport {extendTheme, Input, ThemeProvider} from '@chakra-ui/react';\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: inline-block;\n`;\n\nconst colors = {\n  brand: {\n    900: '#1a365d',\n    800: '#153e75',\n    700: '#2a69ac',\n  },\n}\n\nconst theme = extendTheme({ colors })\n\n\ntype Props = {\n  className: string;\n  defaultOpen: boolean;\n  defaultOpenValue: Date;\n  defaultValue: Date;\n  disabled?: boolean;\n  disabledHours: () => number[];\n  disabledMinutes: (hour: number | null) => number[];\n  disabledSeconds: (hour: number | null, minute: number | null) => number[];\n  format: string;\n  // getAriaLabel: (value: string) => string;\n  hideDisabledOptions: boolean;\n  hourStep: number;\n  id: string;\n  inputClassName: string;\n  minuteStep: number;\n  name: string;\n  onAmPmChange: (ampm: string) => void;\n  onBlur: () => void;\n  onChange: (value: Date) => void;\n  onClose: (value: { open: false }) => void;\n  onFocus: () => void;\n  onOpen: (value: { open: true }) => void;\n  open: boolean;\n  placeholder: string;\n  prefixCls: string;\n  secondStep: number;\n  showHour: boolean;\n  showMinute: boolean;\n  showSecond: boolean;\n  style: React.CSSProperties;\n  use12Hours: boolean;\n  value: Date;\n  isInvalid : boolean;\n};\n\nconst defaultProps: Partial<Props> = {\n  id: '',\n  disabled: false,\n  prefixCls: 'react-samay',\n  defaultOpen: false,\n  className: '',\n  inputClassName: '',\n  placeholder: '',\n  defaultOpenValue: new Date(),\n  use12Hours: false,\n  showHour: true,\n  showMinute: true,\n  showSecond: true,\n  isInvalid: false,\n  disabledHours: () => [],\n  disabledMinutes: () => [],\n  disabledSeconds: () => [],\n  hideDisabledOptions: false,\n  onChange: noop,\n  onAmPmChange: noop,\n  onOpen: noop,\n  onClose: noop,\n  onFocus: noop,\n  onBlur: noop,\n  // getAriaLabel: () => 'react-samay-input-time',\n};\n\ntype PickerProps = typeof defaultProps & Props;\n\nexport default class Picker extends Component<\n  PickerProps,\n  { value: Date; open: boolean }\n> {\n  static defaultProps: Partial<Props> = defaultProps;\n\n  private saveInputRef: RefObject<HTMLInputElement>;\n  private savePanelRef: RefObject<Panel>;\n\n  constructor(props: PickerProps) {\n    super(props);\n    this.saveInputRef = React.createRef();\n    this.savePanelRef = React.createRef();\n\n    const {\n      defaultOpen,\n      defaultValue,\n      open = defaultOpen,\n      value = defaultValue,\n    } = props;\n\n    this.state = {\n      open,\n      value,\n    };\n\n    this.onPanelChange = this.onPanelChange.bind(this);\n    this.onAmPmChange = this.onAmPmChange.bind(this);\n    this.onVisibleChange = this.onVisibleChange.bind(this);\n    this.closePanel = this.closePanel.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: PickerProps) {\n    const { value, open } = nextProps;\n\n    if ('value' in nextProps) {\n      this.setState({\n        value,\n      });\n    }\n\n    if (open !== undefined) {\n      this.setState({ open });\n    }\n  }\n\n  onPanelChange(value: Date) {\n    this.setValue(value);\n  }\n\n  onAmPmChange(ampm: string) {\n    const { onAmPmChange } = this.props;\n    onAmPmChange(ampm);\n  }\n\n  onVisibleChange(open: boolean) {\n    this.setOpen(open);\n  }\n\n  closePanel() {\n    this.setOpen(false);\n    this.focus();\n  }\n\n  onKeyDown(e: KeyboardEvent) {\n    if ([8, 13, 32, 40].indexOf(e.keyCode) >= 0) {\n      this.setOpen(true);\n    }\n  }\n\n  onClick() {\n    this.setOpen(true);\n  }\n\n  setValue(value: Date) {\n    const { onChange } = this.props;\n\n    if (!('value' in this.props)) {\n      this.setState({\n        value,\n      });\n    }\n\n    onChange(value);\n  }\n\n  getFormat(includeAMPM = true) {\n    const { format, showHour, showMinute, showSecond, use12Hours } = this.props;\n\n    if (format) return format;\n\n    if (use12Hours) {\n      const fmtString = [\n        showHour ? 'h' : '',\n        showMinute ? 'mm' : '',\n        showSecond ? 'ss' : '',\n      ]\n        .filter((item) => !!item)\n        .join(':');\n\n      return includeAMPM ? fmtString.concat(' a') : fmtString;\n    }\n\n    return [\n      showHour ? 'HH' : '',\n      showMinute ? 'mm' : '',\n      showSecond ? 'ss' : '',\n    ]\n      .filter((item) => !!item)\n      .join(':');\n  }\n\n  setOpen(open: boolean) {\n    const { onOpen, onClose } = this.props;\n    const { open: currentOpen } = this.state;\n\n    if (currentOpen !== open) {\n      if (!('open' in this.props)) {\n        this.setState({ open });\n      }\n\n      if (open) {\n        onOpen({ open });\n      } else {\n        onClose({ open });\n      }\n    }\n  }\n\n  focus() {\n    const el = this.saveInputRef.current;\n    if (el) el.focus();\n  }\n\n  render() {\n    const {\n      id,\n      name,\n      disabled,\n      placeholder,\n      style,\n      prefixCls,\n      className,\n      inputClassName,\n      // getAriaLabel,\n      disabledHours,\n      disabledMinutes,\n      disabledSeconds,\n      hideDisabledOptions,\n      showHour,\n      showMinute,\n      showSecond,\n      defaultOpenValue,\n      use12Hours,\n      onFocus,\n      onBlur,\n      hourStep,\n      minuteStep,\n      secondStep,\n      isInvalid\n    } = this.props;\n\n    const { open, value } = this.state;\n    const strValue = (value && format(value, this.getFormat(use12Hours))) || '';\n\n    return (\n      <ThemeProvider theme={theme}>\n\n      <Wrapper\n        id={id}\n        style={style}\n        className={cx(`${prefixCls}-wrapper`, className)}\n      >\n        <Input\n          type=\"text\"\n          name={name}\n          className={cx(`${prefixCls}-input`, inputClassName)}\n          ref={this.saveInputRef}\n          placeholder={placeholder}\n          disabled={disabled}\n          value={strValue}\n          onChange={noop}\n          onFocus={onFocus}\n          onBlur={onBlur}\n          onClick={this.onClick}\n          onKeyDown={this.onKeyDown}\n          isInvalid={isInvalid}\n        />\n       \n               {open && (\n          <Panel\n            prefixCls={`${prefixCls}-panel`}\n            ref={this.savePanelRef}\n            value={this.state.value}\n            defaultOpenValue={defaultOpenValue}\n            showHour={showHour}\n            showMinute={showMinute}\n            showSecond={showSecond}\n            closePanel={this.closePanel}\n            format={this.getFormat()}\n            disabledHours={disabledHours}\n            disabledMinutes={disabledMinutes}\n            disabledSeconds={disabledSeconds}\n            hideDisabledOptions={hideDisabledOptions}\n            use12Hours={use12Hours}\n            hourStep={hourStep}\n            minuteStep={minuteStep}\n            secondStep={secondStep}\n            onChange={this.onPanelChange}\n            onAmPmChange={this.onAmPmChange}\n          />\n        )}\n      </Wrapper>\n      </ThemeProvider >\n    );\n  }\n}\n"],"names":[],"sourceRoot":""}